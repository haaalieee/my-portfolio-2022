/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Chris Russell (https://sketchfab.com/chris.russ)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/models/a9e3d6e3a41344e4b4423290b863614f
title: Billboard
*/
import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF, useScroll, Image } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { useSpring, easings } from "@react-spring/three";

export default function Model({ ...props }) {
  const ref = useRef();
  const imgRef = useRef();
  const bboardPosZ = useRef({ z: 0, started: false });
  const { nodes, materials } = useGLTF("/billboard.gltf");
  const imgUrl = "/react-screen.gif";
  const scroll = useScroll();
  const rootCamera = useThree();

  const [_, api] = useSpring(() => ({
    config: {
      duration: 2000,
      easing: easings.easeOutCubic,
    },
    from: {
      y: rootCamera.camera.position.y,
    },
    onStart() {
      bboardPosZ.current.started = true;
      console.log("started");
    },
    onChange({ value }) {
      bboardPosZ.current.y = value.y;
    },
    onRest() {
      console.log("resting");
    },
  }));

  useFrame((state, delta) => {
    const modelInView = scroll.visible(2 / 4, 3 / 4);
   
    // 19, 20, -7
    if (modelInView) {
      if (!bboardPosZ.current.started) {
        api.start({
          from: {
            y: state.camera.position.y,
          },
          to: { y: -20 },
        });
      } else {
        state.camera.position.y = bboardPosZ.current.y;
      }
    }
  });

  return (
    <group
      ref={ref}
      position={[-2, -42, 8]}
      rotation={[0, 2.5, 0]}
      scale={7.5}
      {...props}
      dispose={null}
    >
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh position={[0.01, 0.35, 0.07]} scale={[1.9, 0.9, 1.2]}>
            <Image ref={imgRef} url={imgUrl} />
          </mesh>
          <mesh
            geometry={nodes.defaultMaterial.geometry}
            material={materials.DefaultMaterial}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/billboard.gltf");

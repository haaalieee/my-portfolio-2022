/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Chris Russell (https://sketchfab.com/chris.russ)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/models/a9e3d6e3a41344e4b4423290b863614f
title: Billboard
*/
import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF, useScroll, Image } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import Robot from "./Robot";

export default function Model({ ...props }) {
  const ref = useRef();
  const { nodes, materials } = useGLTF("/billboard.gltf");
  const imgUrl = "/react-screen.gif";
  const scroll = useScroll();
  const { height } = useThree((state) => state.viewport);

  useFrame((state, delta) => {
    const firstModelInView = scroll.visible(0 / 4, 2 / 4);
    const secondModelInView = scroll.visible(2 / 4, 1 / 4);
    const thirdModelInView = scroll.visible(3 / 4, 1 / 4);

    if (firstModelInView) {
      ref.current.position.y = THREE.MathUtils.damp(
        ref.current.position.y,
        firstModelInView ? -40 : height + 2,
        4,
        delta
      );
    }

    if (secondModelInView) {
      ref.current.position.y = THREE.MathUtils.damp(
        ref.current.position.y,
        secondModelInView ? -height + 2 : -40,
        4,
        delta
      );
    }

    if (thirdModelInView) {
      ref.current.position.y = THREE.MathUtils.damp(
        ref.current.position.y,
        thirdModelInView ? 40 : -height + 2,
        4,
        delta
      );
    }
  });

  return (
    <group ref={ref} position={[0, -30, 5]} scale={3}>
      <group
        position={[-0.5, 0.5, 1]}
        rotation={[0, 2.5, 0]}
        scale={2.2}
        {...props}
        dispose={null}
      >
        <group rotation={[-Math.PI / 2, 0, 0]}>
          <group rotation={[Math.PI / 2, 0, 0]}>
            <mesh position={[0.01, 0.35, 0.07]} scale={[1.9, 0.9, 1.2]}>
              <Image url={imgUrl} />
            </mesh>
            <mesh
              geometry={nodes.defaultMaterial.geometry}
              material={materials.DefaultMaterial}
            />
          </group>
        </group>
      </group>
      <Robot />
    </group>
  );
}

useGLTF.preload("/billboard.gltf");


//import { useSpring, easings } from "@react-spring/three";

// const [_, api] = useSpring(() => ({
//   config: {
//     duration: 2000,
//     easing: easings.easeOutCubic,
//   },
//   from: {
//     y: rootCamera.camera.position.y,
//   },
//   onStart() {
//     bboardPosZ.current.started = true;
//     console.log("started");
//   },
//   onChange({ value }) {
//     bboardPosZ.current.y = value.y;
//   },
// }));

// console.log('first ' + firstModelInView);
// console.log('second ' + secondModelInView);
// console.log('third ' + thirdModelInView);

// 19, 20, -7
// if (secondModelInView) {
//   if (!bboardPosZ.current.started) {
//     api.start({
//       from: {
//         y: state.camera.position.y,
//       },
//       to: { y: -20 },
//     });
//   } else {
//     state.camera.position.y = bboardPosZ.current.y;
//   }
// }

// if (firstModelInView) {
//   bboardPosZ.current.started = false;
// }

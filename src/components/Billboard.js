/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Chris Russell (https://sketchfab.com/chris.russ)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/models/a9e3d6e3a41344e4b4423290b863614f
title: Billboard
*/
import { Image, useGLTF, useScroll } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import React, { useRef } from "react";
import * as THREE from "three";
import Robot from "./Robot";

export default function Model({ ...props }) {
  const ref = useRef();
  const { nodes, materials } = useGLTF("/billboard.gltf");
  const imgUrl = "/react-screen.gif";
  const scroll = useScroll();
  const { height } = useThree((state) => state.viewport);

  useFrame((state, delta) => {
    const firstModelInView = scroll.visible(0 / 4, 2 / 4);
    const secondModelInView = scroll.visible(2 / 4, 1 / 4);
    const thirdModelInView = scroll.visible(3 / 4, 1 / 4);

    const currentYPosition = ref.current.position.y;

    if (firstModelInView) {
      const newYPosition = THREE.MathUtils.lerp(currentYPosition, -40, 0.05);
      ref.current.position.set(
        ref.current.position.x,
        newYPosition,
        ref.current.position.z
      );
    }

    if (secondModelInView) {
      const newYPosition = THREE.MathUtils.lerp(
        currentYPosition,
        -height + 2,
        0.05
      );
      ref.current.position.set(
        ref.current.position.x,
        newYPosition,
        ref.current.position.z
      );
    }

    if (thirdModelInView) {
      const newYPosition = THREE.MathUtils.lerp(currentYPosition, 40, 0.01);
      ref.current.position.set(
        ref.current.position.x,
        newYPosition,
        ref.current.position.z
      );
    }
  });

  return (
    <group ref={ref} position={[0, -5, 5]} scale={3}>
      <group
        position={[-0.5, 0.5, 1]}
        rotation={[0, 2.5, 0]}
        scale={2.2}
        {...props}
        dispose={null}
      >
        <group rotation={[-Math.PI / 2, 0, 0]}>
          <group rotation={[Math.PI / 2, 0, 0]}>
            <mesh position={[0.01, 0.35, 0.07]} scale={[1.9, 0.9, 1.2]}>
              <Image url={imgUrl} />
            </mesh>
            <mesh
              geometry={nodes.defaultMaterial.geometry}
              material={materials.DefaultMaterial}
            />
          </group>
        </group>
      </group>
      <Robot />
    </group>
  );
}

useGLTF.preload("/billboard.gltf");

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Ale_jandro (https://sketchfab.com/Ale_jandro)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/floating-island-handpainted-fe1de0e8e12649518f0c3ea2b804dca8
title: Floating_island_HandPainted
*/
import * as THREE from "three";
import React, { useEffect, useState, useRef } from "react";
import { useGLTF, useAnimations, useScroll } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useSurpriseUpdate } from "../context/AboutContext";

export default function Model({ ...props }) {
  const { scene, nodes, materials, animations } = useGLTF("/tree.gltf");
  const { ref, actions } = useAnimations(animations);
  const scroll = useScroll();
  const [hovered, setHovered] = useState(false);
  const toggleCloudOpacity = useSurpriseUpdate();

  useEffect(() => {
    actions["Take 001"].play();
  }, [actions]);

  useEffect(
    () => void (document.body.style.cursor = hovered ? "pointer" : "auto"),
    [hovered]
  );

  useFrame((state, delta) => {
    const offset = 1 - scroll.offset;
    state.camera.position.set(
      Math.sin(offset) * 30,
      Math.atan(offset * Math.PI * 2) * 15,
      Math.cos((offset * Math.PI) / 3) * -10
    );
    state.camera.lookAt(3, 10, 9);

    ref.current.position.x = 0;
    ref.current.position.y = -13;
    ref.current.position.z = 4;

    if (hovered) {
      console.log("hovered");
    }
  });

  return (
    <primitive object={scene} ref={ref} {...props}>
      <group
        position={[1.07, 2.88, 4.29]}
        rotation={[-0.82, 1.12, 0.72]}
        scale={[0.29, 0.29, 0.29]}
      >
        <mesh
          geometry={nodes.baculo__lambert9_0.geometry}
          material={ materials.lambert9}
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={toggleCloudOpacity}
        />
      </group>
    </primitive>
  );
}

useGLTF.preload("/tree.gltf");
